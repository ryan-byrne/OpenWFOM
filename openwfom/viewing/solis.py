import shutil, sysconfig, psutil, json, time, os, subprocess
import sys, serial, argparse
from serial import Serial
import openwfom
from pywinauto.application import Application, AppStartError
from pywinauto.controls.menuwrapper import MenuItemInfo

class Solis(object):

    """

    This class is used for interaction between the Java GUI's and Andor SOLIS.

    It is initiated in both the Test and Run Modes.

    """

    def __init__(self):
        self.JSON_SETTINGS = {}

        self._check_java()

        print("Checking if SOLIS is Open...")

        if not self._check_solis():
            print("SOLIS is not open. Opening it now...")
            self._open_solis()
        else:
            print("SOLIS is already open...")
        time.sleep(3)
        self._connect_to_camera()

    def preview():
        # FIXME add external script to preview the camera in Solis
        pass

    def _check_solis(self):
        if "AndorSolis.exe" in [p.name() for p in psutil.process_iter()]:
            return True
        else:
            return False

    def _info(self):

        """

        For information on the 'Info' GUI go here:
        https://github.com/ryan-byrne/wfom/wiki/Usage#1-info-gui

        """

        print("Waiting for Run Info from GUI...")

        if os.path.isfile("settings.json"):
            os.remove("settings.json")
        path = "{0}info.jar".format(self.JAR_PATH)
        subprocess.call(["java", "-jar", path])

        self._read_json_settings()

        self._create_path_to_files()

    def _camera(self):

        """

        For information on the 'Camera' GUI go here https://github.com/ryan-byrne/wfom/wiki/Usage#2-camera-gui

        """

        # The Camera JAR is opened to be able to control the Camera settings.
        print("Opening Camera Settings GUI...")

        os.chdir("JavaGUI")
        subprocess.Popen(["java", "-jar","JARs\\camera.jar"])
        os.chdir("..")

        print("Waiting for Camera settings to be Deployed")
        self._read_zyla_settings()
        OLD_ZYLA_SETTINGS = self.ZYLA_SETTINGS

        # A loop then waits for 'deployed' to be the last line of settings.txt
        while True:
            # Read the settings from the txt file generated by the GUI
            self._read_zyla_settings()
            update = False
            # Loop through each setting
            if len(self.ZYLA_SETTINGS) > 11:
                self._reset_zyla_settings()
                break
            for i in range(len(self.ZYLA_SETTINGS)):
                if i > 7:
                    # Stop when you get to the File Names
                    break
                # Setting from Last Scan
                old = float(OLD_ZYLA_SETTINGS[i])
                # Setting from latest scan
                new = float(self.ZYLA_SETTINGS[i])
                if old != new:
                    # Get ready to update if a setting has changed
                    update = True
                else:
                    pass
            if update:
                print("Updating Preview with new Settings", "standing")
                # Set the new parameters
                self._set_parameters()
                time.sleep(1)
                try:
                    self._view()
                except:
                    self._abort()
            # Read settings from settings.txt
            self._read_zyla_settings()
            OLD_ZYLA_SETTINGS = self.ZYLA_SETTINGS
            time.sleep(0.05)
        # Create the Camera object in settings.json
        self._deploy_json_camera_settings()

    def _reset_zyla_settings(self):
        with open("resources/solis_scripts/settings.txt", "r+") as f:
            lines = f.readlines()
            f.seek(0)
            f.writelines([line for line in lines[:-1]])
            f.truncate()
        f.close()

    def _open_solis(self):

        """

        Opens a new instance of AndorSolis.exe

        The command will Timeout after 10 seconds

        """

        try:
            app = Application().start("C:\\Program Files\\Andor SOLIS\\AndorSolis.exe", timeout=10)
        except Exception as e:
            raise FileNotFoundError("You may not have SOLIS Installed.")

    def _connect_to_camera(self):

        """

        Attaches a pywinauto controller to the Andor Window.

        The connection times out after 3 seconds.

        It then creates the variable 'self.soliswin' which will be used by
        the script later.

        """

        print("Attempting to Connect to Camera...")
        try:
            self.solis = Application().connect(title_re="Andor SOLIS", timeout=30)
            self.soliswin = self.solis.window(title_re="Andor SOLIS", found_index=0)
            self._view()
        except Exception as e:
            try:
                self._abort()
                self._view()
            except Exception as e:
                msg = "Unable to connect to the Camera via SOLIS"
                raise ConnectionError(msg)

    def _restart_solis(self):

        """

        Exits current instance of SOLIS, allows the user to turn on the Camera,
        then reopens SOLIS.

        """

        for p in psutil.process_iter():
            if p.name() == "AndorSolis.exe":
                p.kill()
                break
        input("Power on the camera then press [ENTER]")
        self._open_solis()
        self._connect_to_camera()

    def _preview(self):

        """

        For information on the 'Preview' GUI go here https://github.com/ryan-byrne/wfom/wiki/Usage#5-preview-gui

        """

        print("Previewing settings. Select 'Begin Acquisition' start.")

        os.chdir("JavaGUI")
        subprocess.call(["java", "-jar","JARs/preview.jar"])
        os.chdir("..")

    def set_parameters(self):

        """

        Executes the Solis PGM 'set_parameters.pgm', which reads the SETTINGS
        from 'settings.txt' and deploys them to the camera.

        If the Menu Item is not enabled, an error prompt will appear.

        """

        self._abort()
        cwd = os.getcwd()
        set_param = r"resources\solis_scripts\set_parameters.pgm"
        file = r'"%s\%s"' % (cwd, set_param)
        print("Setting parameters in SOLIS...")
        try:
            self.soliswin.menu_select("File -> Run Program By Filename")
            open_opt = self.solis.window(title_re="Open")
            file_name = open_opt.Edit.set_text(file)
            open_opt.Button.click()
        except (Exception, MenuItemNotEnabled) as e:
            msg = "The camera is likely not attached and/or plugged in."
            raise ConnectionError(msg)

    def _deploy_json_camera_settings(self):

        """

        Reads the Zyla 'settings.txt' file, converts it to a Python dict and
        sends the settings to 'settings.json'

        """

        # Update the self.ZYLA_SETTINGS list file
        self._read_zyla_settings()

        print("Updating the Camera settings in 'settings.json'")
        parameters = ["binning", "height", "bottom", "width", "length", "exposure", "framerate"]

        # Open 'settings.json' to be editable
        with open("JavaGUI/settings.json", "r+") as f:
            # Create an empty dict under self.JSON_SETTINGS.camera
            self.JSON_SETTINGS["camera"] = {}
            # Iterate through each parameter and match it with its ZYLA_SETTING
            for i in range(len(parameters)):
                self.JSON_SETTINGS["camera"][parameters[i]] = self.ZYLA_SETTINGS[i]
            f.seek(0)
            json.dump(self.JSON_SETTINGS, f)
            f.truncate()
        f.close()

    def view(self):

        print("Attempting to Initiate Camera Preview in SOLIS")
        self.soliswin.menu_select("Acquisition->Take Video")

    def abort(self):

        print("Attempting to Abort Camera Preview in SOLIS")
        self.soliswin.menu_select("Acquisition->Abort Acquisition")

    def _make_directories(self):
        try:
            print("Making directory: "+self.PATH_TO_FILES)
            os.mkdir(self.PATH_TO_FILES)
            print("Making directory: "+self.PATH_TO_FILES+"/CCD")
            os.mkdir(self.PATH_TO_FILES+"/CCD")
            print("Making directory: "+self.PATH_TO_FILES+"/webcam")
            os.mkdir(self.PATH_TO_FILES+"/webcam")
            src = "JavaGUI/settings.json"
            dst = self.PATH_TO_FILES+"/settings.json"
            print("Moving JavaGUI/settings.json to "+self.PATH_TO_FILES+"\\settings.json")
            shutil.move(src, dst)
        except Exception as e:
            msg = "Could not make the directories at {0}".format(self.PATH_TO_FILES)
            raise e

    def _read_zyla_settings(self):

        """

        Checks the settings currently deployed to the camera and stored in the
        'settings.txt' file.

        """

        with open("resources\\solis_scripts\\settings.txt", "r") as f:
            ZYLA_SETTINGS = f.readlines()
        f.close()
        self.ZYLA_SETTINGS = [x.strip() for x in ZYLA_SETTINGS]

    def _read_json_settings(self):

        print("Reading the 'settings.json' file...")
        try:
            with open("JavaGUI\\settings.json", "r+") as f:
                self.JSON_SETTINGS = json.load(f)
            f.close()
        except Exception as e:
            msg = "Unable to find the 'settings.json' file. It may have been deleted."
            raise e

    def acquire(self):

        """

        * Read the current Zyla Settings
        * Write the settings to 'settings.json'
        * Make the acquisition directories and send 'settings.json' to them

        """

        self._read_json_settings()

        self._make_directories()

        self._finalise_zyla_settings()

        self._abort()

        cwd = os.getcwd()
        acquire = r"resources\solis_scripts\acquire.pgm"
        file = r'"%s\%s"' % (cwd, acquire)
        try:
            self.soliswin.menu_select("File -> Run Program By Filename")
            open_opt = self.solis.window(title_re="Open")
            file_name = open_opt.Edit.set_text(file)
            open_opt.Button.click()
            self._acquisition_countdown()
        except (Exception, MenuItemNotEnabled) as e:
            msg = "The camera is likely not attached and/or plugged in."
            raise e

    def _acquisition_countdown(self):
        total_time = 2*float(self.JSON_SETTINGS["run"]["run_len"])*float(self.JSON_SETTINGS["run"]["num_run"])
        while total_time > -1:

            min = str(int(total_time/60))
            sec = str(int(total_time % 60))

            if min == "0":
                msg = "{0} sec Remaining".format(sec)
            else:
                msg = "{0} min {1} sec Remaining".format(min, sec)

            print("Acquisition Started. "+msg)

            time.sleep(1)
            total_time -= 1
        print( "Acquisition complete. Files have been saved to: "+self.PATH_TO_FILES)

    def _create_path_to_files(self):

        print("Creating path to acquisition files...")

        mouse = self.JSON_SETTINGS["info"]["mouse"]
        with open("JavaGUI\\archive.json", "r+") as f:
            archive = json.load(f)
            d = archive["mice"][mouse]["last_trial"]+1
            archive["mice"][mouse]["last_trial"] = d
            f.seek(0)
            json.dump(archive, f, indent=4)
            f.truncate()
        f.close()
        mouse = self.JSON_SETTINGS["info"]["mouse"]
        drive = "C:\\"
        path = drive+"wfom_data\\files\\"
        if os.path.isdir(drive+"wfom_data"):
            pass
        else:
            print("Directory for acquisition files ({0}) does not exist. Creating it now.".format(path))
            os.mkdir(drive+"wfom_data")
            os.mkdir(drive+"wfom_data\\files\\")
        if not os.path.isdir(path + mouse + "_" + str(d)):
            path = path + mouse + "_" + str(d)
        else:
            path = path + mouse + "_" + str(d+1)
        self.PATH_TO_FILES = path

    def _finalise_zyla_settings(self):

        self._read_zyla_settings()

        """
        settings.txt format:

        0 binning
        1 height
        2 bottom
        3 width
        4 left
        5 exposure time
        6 Framerate
        7 Run Duration
        8 Spool File Stem
        9 Spool File Directory
        10 Number of Runs

        """

        self.ZYLA_SETTINGS[7] = self.JSON_SETTINGS["run"]["run_len"]
        self.ZYLA_SETTINGS[9] = self.PATH_TO_FILES + "\\CCD"
        self.ZYLA_SETTINGS[10] = self.JSON_SETTINGS["run"]["num_run"]
        with open("resources\\solis_scripts\\settings.txt", "r+") as f:
            f.seek(0)
            f.writelines([line + "\n" for line in self.ZYLA_SETTINGS])
        f.close()
